///*
// * Copyright (c) 2015, Ali Afroozeh and Anastasia Izmaylova, Centrum Wiskunde & Informatica (CWI)
// * All rights reserved.
// *
// * Redistribution and use in source and binary forms, with or without
// * modification, are permitted provided that the following conditions are met:
// *
// * 1. Redistributions of source code must retain the above copyright notice, this
// *    list of conditions and the following disclaimer.
// *
// * 2. Redistributions in binary form must reproduce the above copyright notice, this
// *    list of conditions and the following disclaimer in the documentation and/or
// *    other materials provided with the distribution.
// *
// * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
// * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA,
// * OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
// * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
// * OF SUCH DAMAGE.
// *
// */
//
//package org.iguana.parser.datadependent.haskell;
//
//import static org.iguana.grammar.symbol.LayoutStrategy.NO_LAYOUT;
//import static org.iguana.util.CollectionsUtil.set;
//
//import java.io.IOException;
//import java.util.Arrays;
//
//import org.iguana.datadependent.ast.AST;
//import org.iguana.grammar.Grammar;
//import org.iguana.grammar.GrammarGraph;
//import org.iguana.grammar.condition.ConditionType;
//import org.iguana.grammar.condition.RegularExpressionCondition;
//import org.iguana.grammar.symbol.Align;
//import org.iguana.grammar.symbol.Associativity;
//import org.iguana.regex.Character;
//import org.iguana.regex.CharacterRange;
//import org.iguana.grammar.symbol.Conditional;
//import org.iguana.grammar.symbol.Ignore;
//import org.iguana.grammar.symbol.Nonterminal;
//import org.iguana.grammar.symbol.Offside;
//import org.iguana.grammar.symbol.PrecedenceLevel;
//import org.iguana.grammar.symbol.Recursion;
//import org.iguana.grammar.symbol.Rule;
//import org.iguana.grammar.symbol.Start;
//import org.iguana.grammar.symbol.Terminal;
//import org.iguana.grammar.transformation.DesugarAlignAndOffside;
//import org.iguana.grammar.transformation.DesugarPrecedenceAndAssociativity;
//import org.iguana.grammar.transformation.EBNFToBNF;
//import org.iguana.grammar.transformation.LayoutWeaver;
//import org.iguana.parser.IguanaParser;
//import org.iguana.parser.ParseResult;
//import org.iguana.regex.Alt;
//import org.iguana.regex.Opt;
//import org.iguana.regex.Plus;
//import org.iguana.regex.Sequence;
//import org.iguana.regex.Star;
//import org.iguana.util.Configuration;
//import org.junit.Assert;
//import org.junit.Test;
//
//import iguana.utils.input.Input;
//
//@SuppressWarnings("unused")
//public class Haskell {
//
//    @Test
//    public void test() throws IOException {
//         Grammar grammar =
//
//Grammar.builder()
//.setLayout(new Nonterminal.Builder("Whitespace").build())
//// CDecls ::= align offside DCDecls*  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CDecls").build()).addSymbol(Align.builder(Star.builder(Offside.builder(new Nonterminal.Builder("DCDecls").build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CDecls ::= ignore (({) CDecl?+ (}))  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CDecls").build()).addSymbol(Ignore.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(123).build()).build()).build(), new Plus.Builder(Opt.builder(new Nonterminal.Builder("CDecl").build()).build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build())).build(), new Terminal.Builder(Sequence.builder(Character.builder(125).build()).build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LExp1 ::= FExp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LExp1").build()).addSymbol(new Nonterminal.Builder("FExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LExp1 ::= (c a s e) Exp (o f) Alts  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LExp1").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(99).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(111).build(), Character.builder(102).build()).build()).build()).addSymbol(new Nonterminal.Builder("Alts").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LExp1 ::= (d o) Stmts  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LExp1").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build()).build()).build()).addSymbol(new Nonterminal.Builder("Stmts").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QVarId ::= (ModId (.))? VarId  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QVarId").build()).addSymbol(Opt.builder(Sequence.builder(new Nonterminal.Builder("ModId").build(), new Terminal.Builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("VarId").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GDPat ::= Guards (- >) Exp opt:GDPat? when ind == 0 || len(opt) > 0 || $(opt.rExt) || not(startsWith(opt.rExt,"|")) || indent(opt.rExt) <= ind when ind == 0 || len(opt) > 0 || $(opt.rExt) || startsWith(opt.rExt,"}",")",";","in","of","then","else","where","|") || indent(opt.rExt) <= ind  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GDPat").build()).addSymbol(new Nonterminal.Builder("Guards").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).addSymbol(Conditional.builder(Conditional.builder(Opt.builder(new Nonterminal.Builder("GDPat").build()).setLabel("opt").build(),AST.or(AST.or(AST.or(AST.or(AST.equal(AST.var("ind"),AST.integer(0)),AST.greater(AST.len(AST.var("opt")),AST.integer(0))),AST.endOfFile(AST.rExt("opt"))),AST.not(AST.startsWith(AST.rExt("opt"),AST.string("|")))),AST.lessEq(AST.indent(AST.rExt("opt")),AST.var("ind")))).build(),AST.or(AST.or(AST.or(AST.or(AST.equal(AST.var("ind"),AST.integer(0)),AST.greater(AST.len(AST.var("opt")),AST.integer(0))),AST.endOfFile(AST.rExt("opt"))),AST.startsWith(AST.rExt("opt"),AST.string("}"),AST.string(")"),AST.string(";"),AST.string("in"),AST.string("of"),AST.string("then"),AST.string("else"),AST.string("where"),AST.string("|"))),AST.lessEq(AST.indent(AST.rExt("opt")),AST.var("ind")))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ImpSpec ::= (h i d i n g) (() Import* (,)? ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ImpSpec").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(104).build(), Character.builder(105).build(), Character.builder(100).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(103).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Star.builder(new Nonterminal.Builder("Import").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ImpSpec ::= (() Import* (,)? ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ImpSpec").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Star.builder(new Nonterminal.Builder("Import").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// NComment ::= ({ -) (NComment | ({) | (-) | (\u0001-, | .-z | |-\u10FFFF))* (- })  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("NComment").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(123).build(), Character.builder(45).build()).build()).build()).addSymbol(Star.builder(Alt.builder(new Nonterminal.Builder("NComment").build(), new Terminal.Builder(Sequence.builder(Character.builder(123).build()).build()).addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Character.builder(45).build()))).build(), new Terminal.Builder(Sequence.builder(Character.builder(45).build()).build()).addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Character.builder(125).build()))).build(), Alt.builder(CharacterRange.builder(1, 44).build(), CharacterRange.builder(46, 122).build(), CharacterRange.builder(124, 1114111).build()).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(125).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// TyCls ::= ConId  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("TyCls").build()).addSymbol(new Nonterminal.Builder("ConId").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Class ::= QTyCls AType* ((~) Class)?  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Class").build()).addSymbol(new Nonterminal.Builder("QTyCls").build()).addSymbol(Star.builder(new Nonterminal.Builder("AType").build()).build()).addSymbol(Opt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(126).build()).build()).build(), new Nonterminal.Builder("Class").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GADTDecl ::= TyCon (: :) CType  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GADTDecl").build()).addSymbol(new Nonterminal.Builder("TyCon").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(new Nonterminal.Builder("CType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GADTDecl ::= TyCon (: :) ({) (Var ((: :) CType)?)+ (}) (- >) CType  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GADTDecl").build()).addSymbol(new Nonterminal.Builder("TyCon").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(new Plus.Builder(Sequence.builder(new Nonterminal.Builder("Var").build(), Opt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), new Nonterminal.Builder("CType").build()).build()).build()).build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(125).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(new Nonterminal.Builder("CType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Guards ::= (|) Guard+  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Guards").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(124).build()).build()).build()).addSymbol(new Plus.Builder(new Nonterminal.Builder("Guard").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GConSym ::= QConSym  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GConSym").build()).addSymbol(new Nonterminal.Builder("QConSym").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GConSym ::= (:)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GConSym").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(58).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Inst ::= (() GTyCon TyVar* ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Inst").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Nonterminal.Builder("GTyCon").build()).addSymbol(Star.builder(new Nonterminal.Builder("TyVar").build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Inst ::= GTyCon  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Inst").build()).addSymbol(new Nonterminal.Builder("GTyCon").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Inst ::= (() TyVar (- >) TyVar ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Inst").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Nonterminal.Builder("TyVar").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(new Nonterminal.Builder("TyVar").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Inst ::= (() TyVar (,) TyVar+ ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Inst").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Nonterminal.Builder("TyVar").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build()).addSymbol(new Plus.Builder(new Nonterminal.Builder("TyVar").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Inst ::= ([) TyVar (])  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Inst").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(new Nonterminal.Builder("TyVar").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QCon ::= (() GConSym ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QCon").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Nonterminal.Builder("GConSym").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QCon ::= QConId  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QCon").build()).addSymbol(new Nonterminal.Builder("QConId").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// DGADTDecls ::= GADTDecl next:((;) GADTDecl?)* when ind == 0 || $(next.rExt) || not(startsWith(next.rExt,";")) || indent(next.rExt) <= ind  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("DGADTDecls").build()).addSymbol(new Nonterminal.Builder("GADTDecl").build()).addSymbol(Conditional.builder(Star.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build(), Opt.builder(new Nonterminal.Builder("GADTDecl").build()).build()).build()).setLabel("next").build(),AST.or(AST.or(AST.or(AST.equal(AST.var("ind"),AST.integer(0)),AST.endOfFile(AST.rExt("next"))),AST.not(AST.startsWith(AST.rExt("next"),AST.string(";")))),AST.lessEq(AST.indent(AST.rExt("next")),AST.var("ind")))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// DGADTDecls ::= (;) GADTDecl? next:((;) GADTDecl?)* when ind == 0 || $(next.rExt) || not(startsWith(next.rExt,";")) || indent(next.rExt) <= ind  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("DGADTDecls").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Opt.builder(new Nonterminal.Builder("GADTDecl").build()).build()).addSymbol(Conditional.builder(Star.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build(), Opt.builder(new Nonterminal.Builder("GADTDecl").build()).build()).build()).setLabel("next").build(),AST.or(AST.or(AST.or(AST.equal(AST.var("ind"),AST.integer(0)),AST.endOfFile(AST.rExt("next"))),AST.not(AST.startsWith(AST.rExt("next"),AST.string(";")))),AST.lessEq(AST.indent(AST.rExt("next")),AST.var("ind")))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// WhiteChar ::= (\u0009-\u000B | \\u000D |){UNDEFINED,-1,NON_REC}PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("WhiteChar").build()).addSymbol(Alt.builder(CharacterRange.builder(9, 11).build(), CharacterRange.builder(13, 13).build(), CharacterRange.builder(32, 32).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Small ::= AscSmall  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Small").build()).addSymbol(new Nonterminal.Builder("AscSmall").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Small ::= (_)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Small").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(95).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// FieldDecl ::= Vars (: :) CType  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("FieldDecl").build()).addSymbol(new Nonterminal.Builder("Vars").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(new Nonterminal.Builder("CType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GTyCon ::= ([ :) (: ])  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GTyCon").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(91).build(), Character.builder(58).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(58).build(), Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GTyCon ::= (() (- >) ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GTyCon").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GTyCon ::= (() ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GTyCon").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GTyCon ::= (() (,)+ ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GTyCon").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Plus.Builder(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GTyCon ::= (() (~ #) ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GTyCon").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(126).build(), Character.builder(35).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GTyCon ::= (() (~) ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GTyCon").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(126).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GTyCon ::= (( #) (,)+ (# ))  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GTyCon").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build(), Character.builder(35).build()).build()).build()).addSymbol(new Plus.Builder(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(35).build(), Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GTyCon ::= ([) (])  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GTyCon").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GTyCon ::= (() QTyConSym ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GTyCon").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Nonterminal.Builder("QTyConSym").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GTyCon ::= QTyCon  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GTyCon").build()).addSymbol(new Nonterminal.Builder("QTyCon").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// DClass ::= QTyCls  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("DClass").build()).addSymbol(new Nonterminal.Builder("QTyCls").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Stmt ::= Qual? (;)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Stmt").build()).addSymbol(Opt.builder(new Nonterminal.Builder("Qual").build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Stmt ::= (r e c) Stmts  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Stmt").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).addSymbol(new Nonterminal.Builder("Stmts").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Hexadecimal ::= HexIt HexIt*  !>>  (0-9 | A-F | a-f)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Hexadecimal").build()).addSymbol(new Nonterminal.Builder("HexIt").build()).addSymbol(Star.builder(new Nonterminal.Builder("HexIt").build()).addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 70).build(), CharacterRange.builder(97, 102).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Context ::= BType  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Context").build()).addSymbol(new Nonterminal.Builder("BType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Context ::= BType (~) BType  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Context").build()).addSymbol(new Nonterminal.Builder("BType").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(126).build()).build()).build()).addSymbol(new Nonterminal.Builder("BType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Large ::= AscLarge  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Large").build()).addSymbol(new Nonterminal.Builder("AscLarge").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Guard ::= (l e t) Decls  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Guard").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build()).addSymbol(new Nonterminal.Builder("Decls").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Guard ::= Pat (< -) InfixExp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Guard").build()).addSymbol(new Nonterminal.Builder("Pat").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build()).addSymbol(new Nonterminal.Builder("InfixExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Guard ::= InfixExp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Guard").build()).addSymbol(new Nonterminal.Builder("InfixExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// SimpleClass ::= QTyCls TyVar  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("SimpleClass").build()).addSymbol(new Nonterminal.Builder("QTyCls").build()).addSymbol(new Nonterminal.Builder("TyVar").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSmall ::= (a-z)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSmall").build()).addSymbol(Alt.builder(CharacterRange.builder(97, 122).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Fds ::= (|) (VarId (- >) VarId)+  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Fds").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(124).build()).build()).build()).addSymbol(new Plus.Builder(Sequence.builder(new Nonterminal.Builder("VarId").build(), new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), new Nonterminal.Builder("VarId").build()).build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QVarOp ::= (`) QVarId (`)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QVarOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(96).build()).build()).build()).addSymbol(new Nonterminal.Builder("QVarId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(96).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QVarOp ::= QVarSym  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QVarOp").build()).addSymbol(new Nonterminal.Builder("QVarSym").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// $default$ ::=  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("$default$").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// FExp ::= FExp? AExp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("FExp").build()).addSymbol(Opt.builder(new Nonterminal.Builder("FExp").build()).build()).addSymbol(new Nonterminal.Builder("AExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QTyCls ::= (ModId (.))? TyCls  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QTyCls").build()).addSymbol(Opt.builder(Sequence.builder(new Nonterminal.Builder("ModId").build(), new Terminal.Builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("TyCls").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Decimal ::= Digit Digit*  !>>  (0-9)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Decimal").build()).addSymbol(new Nonterminal.Builder("Digit").build()).addSymbol(Star.builder(new Nonterminal.Builder("Digit").build()).addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(48, 57).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// SContext ::= (() SimpleClass* ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("SContext").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Star.builder(new Nonterminal.Builder("SimpleClass").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// SContext ::= SimpleClass  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("SContext").build()).addSymbol(new Nonterminal.Builder("SimpleClass").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Export ::= QCon (((() (. .) ())) | ((() (QVar | Con)* ())))?  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Export").build()).addSymbol(new Nonterminal.Builder("QCon").build()).addSymbol(Opt.builder(Alt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(46).build(), Character.builder(46).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).build(), Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build(), Star.builder(Alt.builder(new Nonterminal.Builder("QVar").build(), new Nonterminal.Builder("Con").build()).build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build(), new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Export ::= QVar  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Export").build()).addSymbol(new Nonterminal.Builder("QVar").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Export ::= (m o d u l e) ModId  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Export").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(new Nonterminal.Builder("ModId").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ImpDecls ::= ImpDecl ((;) ImpDecl?)*  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ImpDecls").build()).addSymbol(new Nonterminal.Builder("ImpDecl").build()).addSymbol(Star.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build(), Opt.builder(new Nonterminal.Builder("ImpDecl").build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Space ::= (\u0020)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Space").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(32).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ImpDecl ::= (i m p o r t) (q u a l i f i e d)? ModId ((a s) ModId)? ImpSpec?  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ImpDecl").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(109).build(), Character.builder(112).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build()).addSymbol(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(113).build(), Character.builder(117).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(105).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(101).build(), Character.builder(100).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("ModId").build()).addSymbol(Opt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(97).build(), Character.builder(115).build()).build()).build(), new Nonterminal.Builder("ModId").build()).build()).build()).addSymbol(Opt.builder(new Nonterminal.Builder("ImpSpec").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Exp ::= InfixExp1 (: :) CType  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Exp").build()).addSymbol(new Nonterminal.Builder("InfixExp1").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(new Nonterminal.Builder("CType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// Exp ::= InfixExp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Exp").build()).addSymbol(new Nonterminal.Builder("InfixExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// Exp ::= InfixExp1 (> > -) Exp  {UNDEFINED,1,RIGHT_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Exp").build()).addSymbol(new Nonterminal.Builder("InfixExp1").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(62).build(), Character.builder(62).build(), Character.builder(45).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// Exp ::= InfixExp1 (- < <) Exp  {UNDEFINED,1,RIGHT_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Exp").build()).addSymbol(new Nonterminal.Builder("InfixExp1").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(60).build(), Character.builder(60).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// Exp ::= InfixExp1 (- <) Exp  {UNDEFINED,1,RIGHT_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Exp").build()).addSymbol(new Nonterminal.Builder("InfixExp1").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(60).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// Exp ::= InfixExp1 (> -) Exp  {UNDEFINED,1,RIGHT_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Exp").build()).addSymbol(new Nonterminal.Builder("InfixExp1").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(62).build(), Character.builder(45).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// Symbol ::= AscSymbol  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Symbol").build()).addSymbol(new Nonterminal.Builder("AscSymbol").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// NewConstr ::= Con AType  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("NewConstr").build()).addSymbol(new Nonterminal.Builder("Con").build()).addSymbol(new Nonterminal.Builder("AType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// NewConstr ::= Con ignore (({) Var (: :) CType (}))  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("NewConstr").build()).addSymbol(new Nonterminal.Builder("Con").build()).addSymbol(Ignore.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(123).build()).build()).build(), new Nonterminal.Builder("Var").build(), new Terminal.Builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), new Nonterminal.Builder("CType").build(), new Terminal.Builder(Sequence.builder(Character.builder(125).build()).build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ops ::= Op+  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ops").build()).addSymbol(new Plus.Builder(new Nonterminal.Builder("Op").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// TVBinder ::= (() TyVar (: :) Kind ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("TVBinder").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Nonterminal.Builder("TyVar").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(new Nonterminal.Builder("Kind").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// TVBinder ::= TyVar  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("TVBinder").build()).addSymbol(new Nonterminal.Builder("TyVar").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// NewLine ::= (\
        | \      ){UNDEFINED,-1,NON_REC}PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("NewLine").build()).addSymbol(Alt.builder(CharacterRange.builder(10, 10).build(), CharacterRange.builder(13, 13).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ModId ::= (ConId (.))* ConId  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ModId").build()).addSymbol(Star.builder(Sequence.builder(new Nonterminal.Builder("ConId").build(), new Terminal.Builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("ConId").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Digit ::= AscDigit  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Digit").build()).addSymbol(new Nonterminal.Builder("AscDigit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// DExp ::= Exp opt:(;)? when ind == 0 || $(opt.rExt) || not(startsWith(opt.rExt,";")) || indent(opt.rExt) <= ind when ind == 0 || len(opt) > 0 || $(opt.rExt) || startsWith(opt.rExt,"}",")","in","of","then","else","where") || indent(opt.rExt) <= ind  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("DExp").build()).addSymbol(new Nonterminal.Builder("Exp").build()).addSymbol(Conditional.builder(Conditional.builder(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build()).setLabel("opt").build(),AST.or(AST.or(AST.or(AST.equal(AST.var("ind"),AST.integer(0)),AST.endOfFile(AST.rExt("opt"))),AST.not(AST.startsWith(AST.rExt("opt"),AST.string(";")))),AST.lessEq(AST.indent(AST.rExt("opt")),AST.var("ind")))).build(),AST.or(AST.or(AST.or(AST.or(AST.equal(AST.var("ind"),AST.integer(0)),AST.greater(AST.len(AST.var("opt")),AST.integer(0))),AST.endOfFile(AST.rExt("opt"))),AST.startsWith(AST.rExt("opt"),AST.string("}"),AST.string(")"),AST.string("in"),AST.string("of"),AST.string("then"),AST.string("else"),AST.string("where"))),AST.lessEq(AST.indent(AST.rExt("opt")),AST.var("ind")))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscDigit ::= (0-9)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscDigit").build()).addSymbol(Alt.builder(CharacterRange.builder(48, 57).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscLarge ::= (A-Z)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscLarge").build()).addSymbol(Alt.builder(CharacterRange.builder(65, 90).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Deriving ::= (d e r i v i n g) (DClass | ((() DClass* ())))  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Deriving").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(103).build()).build()).build()).addSymbol(Alt.builder(new Nonterminal.Builder("DClass").build(), Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build(), Star.builder(new Nonterminal.Builder("DClass").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build(), new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// FAType ::= QTyCon AType*  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("FAType").build()).addSymbol(new Nonterminal.Builder("QTyCon").build()).addSymbol(Star.builder(new Nonterminal.Builder("AType").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= (=)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(61).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= (-)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= (%)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(37).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= (!)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(33).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= (>)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(62).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= (:)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(58).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= (.)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(46).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= (*)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(42).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= (&)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(38).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= (?)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(63).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= (/)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(47).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= (+)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(43).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= (#)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= (<)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(60).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= ($)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(36).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= (^)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(94).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= (\)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(92).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= (@)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(64).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= (~)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(126).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AscSymbol ::= (|)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AscSymbol").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(124).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Type ::= BType (- >) CType  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Type").build()).addSymbol(new Nonterminal.Builder("BType").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(new Nonterminal.Builder("CType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// Type ::= BType (~) BType  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Type").build()).addSymbol(new Nonterminal.Builder("BType").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(126).build()).build()).build()).addSymbol(new Nonterminal.Builder("BType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// Type ::= BType  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Type").build()).addSymbol(new Nonterminal.Builder("BType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// Type ::= BType Op \  ((.)) Type  {UNDEFINED,1,RIGHT_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Type").build()).addSymbol(new Nonterminal.Builder("BType").build()).addSymbol(new Nonterminal.Builder("Op").addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(new Terminal.Builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()))).build()).addSymbol(new Nonterminal.Builder("Type").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// Alt ::= Pat (- >) Exp opt:((w h e r e) Decls)? when ind == 0 || len(opt) > 0 || $(opt.rExt) || not(startsWith(opt.rExt,"where")) || indent(opt.rExt) <= ind when ind == 0 || len(opt) > 0 || $(opt.rExt) || startsWith(opt.rExt,"}",")",";","in","of","then","else","where") || indent(opt.rExt) <= ind  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Alt").build()).addSymbol(new Nonterminal.Builder("Pat").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).addSymbol(Conditional.builder(Conditional.builder(Opt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build(), new Nonterminal.Builder("Decls").build()).build()).setLabel("opt").build(),AST.or(AST.or(AST.or(AST.or(AST.equal(AST.var("ind"),AST.integer(0)),AST.greater(AST.len(AST.var("opt")),AST.integer(0))),AST.endOfFile(AST.rExt("opt"))),AST.not(AST.startsWith(AST.rExt("opt"),AST.string("where")))),AST.lessEq(AST.indent(AST.rExt("opt")),AST.var("ind")))).build(),AST.or(AST.or(AST.or(AST.or(AST.equal(AST.var("ind"),AST.integer(0)),AST.greater(AST.len(AST.var("opt")),AST.integer(0))),AST.endOfFile(AST.rExt("opt"))),AST.startsWith(AST.rExt("opt"),AST.string("}"),AST.string(")"),AST.string(";"),AST.string("in"),AST.string("of"),AST.string("then"),AST.string("else"),AST.string("where"))),AST.lessEq(AST.indent(AST.rExt("opt")),AST.var("ind")))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Alt ::= Pat GDPat opt:((w h e r e) Decls)? when ind == 0 || len(opt) > 0 || $(opt.rExt) || not(startsWith(opt.rExt,"where")) || indent(opt.rExt) <= ind  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Alt").build()).addSymbol(new Nonterminal.Builder("Pat").build()).addSymbol(new Nonterminal.Builder("GDPat").build()).addSymbol(Conditional.builder(Opt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build(), new Nonterminal.Builder("Decls").build()).build()).setLabel("opt").build(),AST.or(AST.or(AST.or(AST.or(AST.equal(AST.var("ind"),AST.integer(0)),AST.greater(AST.len(AST.var("opt")),AST.integer(0))),AST.endOfFile(AST.rExt("opt"))),AST.not(AST.startsWith(AST.rExt("opt"),AST.string("where")))),AST.lessEq(AST.indent(AST.rExt("opt")),AST.var("ind")))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Cntrl ::= AscLarge  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Cntrl").build()).addSymbol(new Nonterminal.Builder("AscLarge").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Cntrl ::= (^)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Cntrl").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(94).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Cntrl ::= (])  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Cntrl").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(93).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Cntrl ::= (@)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Cntrl").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(64).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Cntrl ::= (\)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Cntrl").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(92).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Cntrl ::= (_)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Cntrl").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(95).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Cntrl ::= ([)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Cntrl").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(91).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CType ::= Type  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CType").build()).addSymbol(new Nonterminal.Builder("Type").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// CType ::= (f o r a l l) TVBinder* (.) CType  {UNDEFINED,1,RIGHT_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CType").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(108).build()).build()).build()).addSymbol(Star.builder(new Nonterminal.Builder("TVBinder").build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(46).build()).build()).build()).addSymbol(new Nonterminal.Builder("CType").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// CType ::= Context (= >) CType  {UNDEFINED,1,RIGHT_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CType").build()).addSymbol(new Nonterminal.Builder("Context").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(61).build(), Character.builder(62).build()).build()).build()).addSymbol(new Nonterminal.Builder("CType").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// FType ::= FRType  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("FType").build()).addSymbol(new Nonterminal.Builder("FRType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// FType ::= FAType (- >) FType  {UNDEFINED,1,RIGHT_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("FType").build()).addSymbol(new Nonterminal.Builder("FAType").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(new Nonterminal.Builder("FType").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// GCon ::= ([) (])  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GCon").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GCon ::= QCon  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GCon").build()).addSymbol(new Nonterminal.Builder("QCon").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GCon ::= (() ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GCon").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GCon ::= (() (,)+ ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GCon").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Plus.Builder(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Octal ::= OctIt OctIt*  !>>  (0-7)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Octal").build()).addSymbol(new Nonterminal.Builder("OctIt").build()).addSymbol(Star.builder(new Nonterminal.Builder("OctIt").build()).addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(48, 55).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// WhiteStuff ::= WhiteChar  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("WhiteStuff").build()).addSymbol(new Nonterminal.Builder("WhiteChar").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// WhiteStuff ::= NComment  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("WhiteStuff").build()).addSymbol(new Nonterminal.Builder("NComment").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// WhiteStuff ::= Comment  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("WhiteStuff").build()).addSymbol(new Nonterminal.Builder("Comment").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AExp ::= ([) Exp ((,) Exp)? (. .) Exp? (])  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).addSymbol(Opt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build(), new Nonterminal.Builder("Exp").build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(46).build(), Character.builder(46).build()).build()).build()).addSymbol(Opt.builder(new Nonterminal.Builder("Exp").build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
//// AExp ::= (() InfixExp QOp ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Nonterminal.Builder("InfixExp").build()).addSymbol(new Nonterminal.Builder("QOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
//// AExp ::= QVar  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AExp").build()).addSymbol(new Nonterminal.Builder("QVar").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
//// AExp ::= ([ | |) Exp (| | ])  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(91).build(), Character.builder(124).build(), Character.builder(124).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(124).build(), Character.builder(124).build(), Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
//// AExp ::= ([) Exp (|) Qual+ (])  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(124).build()).build()).build()).addSymbol(new Plus.Builder(new Nonterminal.Builder("Qual").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
//// AExp ::= GCon !>>  (.)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AExp").build()).addSymbol(new Nonterminal.Builder("GCon").addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, new Terminal.Builder(Sequence.builder(Character.builder(46).build()).build()).build()))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
//// AExp ::= ([ p |) InfixExp (| ])  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(91).build(), Character.builder(112).build(), Character.builder(124).build()).build()).build()).addSymbol(new Nonterminal.Builder("InfixExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(124).build(), Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
//// AExp ::= ([) Exp+ (])  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(new Plus.Builder(new Nonterminal.Builder("Exp").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
//// AExp ::= ([ d |) TopDecls (| ])  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(91).build(), Character.builder(100).build(), Character.builder(124).build()).build()).build()).addSymbol(new Nonterminal.Builder("TopDecls").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(124).build(), Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
//// AExp ::= (() QOp \  ((-)) InfixExp ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Nonterminal.Builder("QOp").addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(new Terminal.Builder(Sequence.builder(Character.builder(45).build()).build()).build()).build()))).build()).addSymbol(new Nonterminal.Builder("InfixExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
//// AExp ::= (() (#)? (,)? Exp+ (,)? (#)? ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build()).build()).addSymbol(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build()).build()).addSymbol(new Plus.Builder(new Nonterminal.Builder("Exp").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build()).build()).addSymbol(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
//// AExp ::= ([ t |) CType (| ])  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(91).build(), Character.builder(116).build(), Character.builder(124).build()).build()).build()).addSymbol(new Nonterminal.Builder("CType").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(124).build(), Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
//// AExp ::= LiteralH  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AExp").build()).addSymbol(new Nonterminal.Builder("LiteralH").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
//// AExp ::= ([ |) Exp (| ])  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(91).build(), Character.builder(124).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(124).build(), Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
//// AExp ::= AExp ({) FBind* (})  {UNDEFINED,1,LEFT_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AExp").build()).addSymbol(new Nonterminal.Builder("AExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Star.builder(new Nonterminal.Builder("FBind").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.LEFT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,false,true,false,false)).build())
//// Comment ::= Dashes (Any Any*)? (\
        ){UNDEFINED,-1,NON_REC}PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Comment").build()).addSymbol(new Nonterminal.Builder("Dashes").build()).addSymbol(Opt.builder(Sequence.builder(new Nonterminal.Builder("Any").addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(new Terminal.Builder(Sequence.builder(Character.builder(58).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(63).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(61).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(43).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(42).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(47).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(46).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(45).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(33).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(64).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(38).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(37).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(36).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(94).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(126).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(62).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(92).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(124).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(60).build()).build()).build()).build()))).build(), Star.builder(new Nonterminal.Builder("Any").build()).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(10).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Var ::= (() VarSym ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Var").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Nonterminal.Builder("VarSym").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Var ::= VarId  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Var").build()).addSymbol(new Nonterminal.Builder("VarId").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Exponent ::= (E | e) (+ | -)? Decimal  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Exponent").build()).addSymbol(Alt.builder(CharacterRange.builder(69, 69).build(), CharacterRange.builder(101, 101).build()).build()).addSymbol(Opt.builder(Alt.builder(CharacterRange.builder(43, 43).build(), CharacterRange.builder(45, 45).build()).build()).build()).addSymbol(new Nonterminal.Builder("Decimal").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// InfixExp1 ::= LExp1 QOp InfixExp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("InfixExp1").build()).addSymbol(new Nonterminal.Builder("LExp1").build()).addSymbol(new Nonterminal.Builder("QOp").build()).addSymbol(new Nonterminal.Builder("InfixExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// InfixExp1 ::= LExp1  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("InfixExp1").build()).addSymbol(new Nonterminal.Builder("LExp1").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// InfixExp1 ::= (-) InfixExp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("InfixExp1").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build()).build()).build()).addSymbol(new Nonterminal.Builder("InfixExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Pat ::= LPat  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Pat").build()).addSymbol(new Nonterminal.Builder("LPat").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// Pat ::= LPat QConOp Pat  {UNDEFINED,1,RIGHT_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Pat").build()).addSymbol(new Nonterminal.Builder("LPat").build()).addSymbol(new Nonterminal.Builder("QConOp").build()).addSymbol(new Nonterminal.Builder("Pat").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// DStmts ::= (;) DStmt? ((;) DStmt?)*  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("DStmts").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Opt.builder(new Nonterminal.Builder("DStmt").build()).build()).addSymbol(Star.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build(), Opt.builder(new Nonterminal.Builder("DStmt").build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// DStmts ::= DStmt ((;) DStmt?)*  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("DStmts").build()).addSymbol(new Nonterminal.Builder("DStmt").build()).addSymbol(Star.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build(), Opt.builder(new Nonterminal.Builder("DStmt").build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Float ::= Decimal Exponent  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Float").build()).addSymbol(new Nonterminal.Builder("Decimal").build()).addSymbol(new Nonterminal.Builder("Exponent").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Float ::= Decimal (.) Decimal Exponent?  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Float").build()).addSymbol(new Nonterminal.Builder("Decimal").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(46).build()).build()).build()).addSymbol(new Nonterminal.Builder("Decimal").build()).addSymbol(Opt.builder(new Nonterminal.Builder("Exponent").build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ConSym ::= ((:) Symbol+)  \  ((: :))  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ConSym").build()).addSymbol(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(58).build()).build()).build(), new Plus.Builder(new Nonterminal.Builder("Symbol").build()).build()).addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(new Terminal.Builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Con ::= (() ConSym ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Con").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Nonterminal.Builder("ConSym").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Con ::= ConId  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Con").build()).addSymbol(new Nonterminal.Builder("ConId").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Constrs ::= Constr+  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Constrs").build()).addSymbol(new Plus.Builder(new Nonterminal.Builder("Constr").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(124).build()).build()).build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LExp ::= (c a s e) Exp (o f) Alts  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(99).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(111).build(), Character.builder(102).build()).build()).build()).addSymbol(new Nonterminal.Builder("Alts").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LExp ::= (\) APat+ (- >) Exp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(92).build()).build()).build()).addSymbol(new Plus.Builder(new Nonterminal.Builder("APat").build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LExp ::= (l e t) Decls (i n) Exp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build()).addSymbol(new Nonterminal.Builder("Decls").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LExp ::= (p r o c) AExp (- >) Exp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(111).build(), Character.builder(99).build()).build()).build()).addSymbol(new Nonterminal.Builder("AExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LExp ::= FExp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LExp").build()).addSymbol(new Nonterminal.Builder("FExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LExp ::= (d o) Stmts  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build()).build()).build()).addSymbol(new Nonterminal.Builder("Stmts").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LExp ::= (i f) Exp (;)? (t h e n) Exp (;)? (e l s e) Exp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).addSymbol(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).addSymbol(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GADTDecls ::= align offside DGADTDecls*  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GADTDecls").build()).addSymbol(Align.builder(Star.builder(Offside.builder(new Nonterminal.Builder("DGADTDecls").build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GADTDecls ::= ignore (({) GADTDecl+ (}))  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GADTDecls").build()).addSymbol(Ignore.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(123).build()).build()).build(), new Plus.Builder(new Nonterminal.Builder("GADTDecl").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build())).build(), new Terminal.Builder(Sequence.builder(Character.builder(125).build()).build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// DAlts ::= Alt next:((;) Alt?)* when ind == 0 || $(next.rExt) || not(startsWith(next.rExt,";")) || indent(next.rExt) <= ind  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("DAlts").build()).addSymbol(new Nonterminal.Builder("Alt").build()).addSymbol(Conditional.builder(Star.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build(), Opt.builder(new Nonterminal.Builder("Alt").build()).build()).build()).setLabel("next").build(),AST.or(AST.or(AST.or(AST.equal(AST.var("ind"),AST.integer(0)),AST.endOfFile(AST.rExt("next"))),AST.not(AST.startsWith(AST.rExt("next"),AST.string(";")))),AST.lessEq(AST.indent(AST.rExt("next")),AST.var("ind")))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// DAlts ::= (;) Alt? next:((;) Alt?)* when ind == 0 || $(next.rExt) || not(startsWith(next.rExt,";")) || indent(next.rExt) <= ind  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("DAlts").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Opt.builder(new Nonterminal.Builder("Alt").build()).build()).addSymbol(Conditional.builder(Star.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build(), Opt.builder(new Nonterminal.Builder("Alt").build()).build()).build()).setLabel("next").build(),AST.or(AST.or(AST.or(AST.equal(AST.var("ind"),AST.integer(0)),AST.endOfFile(AST.rExt("next"))),AST.not(AST.startsWith(AST.rExt("next"),AST.string(";")))),AST.lessEq(AST.indent(AST.rExt("next")),AST.var("ind")))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LiteralH ::= Float (#)  !>>  (#)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LiteralH").build()).addSymbol(new Nonterminal.Builder("Float").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LiteralH ::= Integer !>>  (.), !>>  (#)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LiteralH").build()).addSymbol(new Nonterminal.Builder("Integer").addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, new Terminal.Builder(Sequence.builder(Character.builder(46).build()).build()).build()), new RegularExpressionCondition(ConditionType.NOT_FOLLOW, new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LiteralH ::= String !>>  (#)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LiteralH").build()).addSymbol(new Nonterminal.Builder("String").addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LiteralH ::= Char (#)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LiteralH").build()).addSymbol(new Nonterminal.Builder("Char").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LiteralH ::= Integer (# #)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LiteralH").build()).addSymbol(new Nonterminal.Builder("Integer").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(35).build(), Character.builder(35).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LiteralH ::= Integer (#)  !>>  (#)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LiteralH").build()).addSymbol(new Nonterminal.Builder("Integer").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LiteralH ::= Char !>>  (#)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LiteralH").build()).addSymbol(new Nonterminal.Builder("Char").addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LiteralH ::= Float !>>  (#)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LiteralH").build()).addSymbol(new Nonterminal.Builder("Float").addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LiteralH ::= Float (# #)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LiteralH").build()).addSymbol(new Nonterminal.Builder("Float").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(35).build(), Character.builder(35).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LiteralH ::= String (#)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LiteralH").build()).addSymbol(new Nonterminal.Builder("String").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// DImpDecls ::= align offside (ImpDecl ((;) ImpDecl?)*)*  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("DImpDecls").build()).addSymbol(Align.builder(Star.builder(Offside.builder(Sequence.builder(new Nonterminal.Builder("ImpDecl").build(), Star.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build(), Opt.builder(new Nonterminal.Builder("ImpDecl").build()).build()).build()).build()).build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QConId ::= (ModId (.))? ConId  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QConId").build()).addSymbol(Opt.builder(Sequence.builder(new Nonterminal.Builder("ModId").build(), new Terminal.Builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("ConId").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Body ::= ({) (;)* ImpDecls (;) TopDecls (})  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Body").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Star.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("ImpDecls").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(new Nonterminal.Builder("TopDecls").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Body ::= ({) (;)* TopDecls (})  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Body").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Star.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("TopDecls").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Body ::= ({) (;)* (})  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Body").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Star.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Body ::= align (DImpDecls DTopDecls)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Body").build()).addSymbol(Align.builder(Sequence.builder(new Nonterminal.Builder("DImpDecls").build(), new Nonterminal.Builder("DTopDecls").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Body ::= ({) (;)* ImpDecls (})  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Body").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Star.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("ImpDecls").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Any ::= Space  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Any").build()).addSymbol(new Nonterminal.Builder("Space").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Any ::= Graphic  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Any").build()).addSymbol(new Nonterminal.Builder("Graphic").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Any ::= Tab  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Any").build()).addSymbol(new Nonterminal.Builder("Tab").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// PKind ::= (() ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("PKind").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// PKind ::= (() Kind (,) Kind+ ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("PKind").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Nonterminal.Builder("Kind").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build()).addSymbol(new Plus.Builder(new Nonterminal.Builder("Kind").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// PKind ::= QTyCon  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("PKind").build()).addSymbol(new Nonterminal.Builder("QTyCon").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// PKind ::= ([) Kind (])  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("PKind").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(new Nonterminal.Builder("Kind").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QTyCon ::= (ModId (.))? TyCon  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QTyCon").build()).addSymbol(Opt.builder(Sequence.builder(new Nonterminal.Builder("ModId").build(), new Terminal.Builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("TyCon").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Stmts ::= offside (align offside DStmts* (;) DExp)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Stmts").build()).addSymbol(Offside.builder(Sequence.builder(Align.builder(Star.builder(Offside.builder(new Nonterminal.Builder("DStmts").build()).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build(), new Nonterminal.Builder("DExp").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Stmts ::= align (align offside DStmts* offside DExp)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Stmts").build()).addSymbol(Align.builder(Sequence.builder(Align.builder(Star.builder(Offside.builder(new Nonterminal.Builder("DStmts").build()).build()).build()).build(), Offside.builder(new Nonterminal.Builder("DExp").build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Stmts ::= ignore (({) Stmt* Exp (;)? (}))  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Stmts").build()).addSymbol(Ignore.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(123).build()).build()).build(), Star.builder(new Nonterminal.Builder("Stmt").build()).build(), new Nonterminal.Builder("Exp").build(), Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(125).build()).build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// DCDecls ::= (;) CDecl? next:((;) CDecl?)* when ind == 0 || $(next.rExt) || not(startsWith(next.rExt,";")) || indent(next.rExt) <= ind  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("DCDecls").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Opt.builder(new Nonterminal.Builder("CDecl").build()).build()).addSymbol(Conditional.builder(Star.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build(), Opt.builder(new Nonterminal.Builder("CDecl").build()).build()).build()).setLabel("next").build(),AST.or(AST.or(AST.or(AST.equal(AST.var("ind"),AST.integer(0)),AST.endOfFile(AST.rExt("next"))),AST.not(AST.startsWith(AST.rExt("next"),AST.string(";")))),AST.lessEq(AST.indent(AST.rExt("next")),AST.var("ind")))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// DCDecls ::= CDecl next:((;) CDecl?)* when ind == 0 || $(next.rExt) || not(startsWith(next.rExt,";")) || indent(next.rExt) <= ind  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("DCDecls").build()).addSymbol(new Nonterminal.Builder("CDecl").build()).addSymbol(Conditional.builder(Star.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build(), Opt.builder(new Nonterminal.Builder("CDecl").build()).build()).build()).setLabel("next").build(),AST.or(AST.or(AST.or(AST.equal(AST.var("ind"),AST.integer(0)),AST.endOfFile(AST.rExt("next"))),AST.not(AST.startsWith(AST.rExt("next"),AST.string(";")))),AST.lessEq(AST.indent(AST.rExt("next")),AST.var("ind")))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// OctIt ::= (0-7)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("OctIt").build()).addSymbol(Alt.builder(CharacterRange.builder(48, 55).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Exports ::= (() Export* (,)? ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Exports").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Star.builder(new Nonterminal.Builder("Export").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// FDecl ::= (i m p o r t) CallConv Safety? Impent Var (: :) FType  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("FDecl").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(109).build(), Character.builder(112).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build()).addSymbol(new Nonterminal.Builder("CallConv").build()).addSymbol(Opt.builder(new Nonterminal.Builder("Safety").build()).build()).addSymbol(new Nonterminal.Builder("Impent").build()).addSymbol(new Nonterminal.Builder("Var").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(new Nonterminal.Builder("FType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// FDecl ::= (e x p o r t) CallConv Expent Var (: :) FType  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("FDecl").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(101).build(), Character.builder(120).build(), Character.builder(112).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build()).addSymbol(new Nonterminal.Builder("CallConv").build()).addSymbol(new Nonterminal.Builder("Expent").build()).addSymbol(new Nonterminal.Builder("Var").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(new Nonterminal.Builder("FType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QConOp ::= GConSym  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QConOp").build()).addSymbol(new Nonterminal.Builder("GConSym").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QConOp ::= (`) QConId (`)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QConOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(96).build()).build()).build()).addSymbol(new Nonterminal.Builder("QConId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(96).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// DTopDecls ::= align offside (TopDecl ((;) TopDecl?)*)*  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("DTopDecls").build()).addSymbol(Align.builder(Star.builder(Offside.builder(Sequence.builder(new Nonterminal.Builder("TopDecl").build(), Star.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build(), Opt.builder(new Nonterminal.Builder("TopDecl").build()).build()).build()).build()).build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// DDecls ::= Decl next:((;) Decl?)* when ind == 0 || $(next.rExt) || not(startsWith(next.rExt,";")) || indent(next.rExt) <= ind  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("DDecls").build()).addSymbol(new Nonterminal.Builder("Decl").build()).addSymbol(Conditional.builder(Star.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build(), Opt.builder(new Nonterminal.Builder("Decl").build()).build()).build()).setLabel("next").build(),AST.or(AST.or(AST.or(AST.equal(AST.var("ind"),AST.integer(0)),AST.endOfFile(AST.rExt("next"))),AST.not(AST.startsWith(AST.rExt("next"),AST.string(";")))),AST.lessEq(AST.indent(AST.rExt("next")),AST.var("ind")))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// DDecls ::= (;) Decl? next:((;) Decl?)* when ind == 0 || $(next.rExt) || not(startsWith(next.rExt,";")) || indent(next.rExt) <= ind  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("DDecls").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build()).addSymbol(Opt.builder(new Nonterminal.Builder("Decl").build()).build()).addSymbol(Conditional.builder(Star.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build(), Opt.builder(new Nonterminal.Builder("Decl").build()).build()).build()).setLabel("next").build(),AST.or(AST.or(AST.or(AST.equal(AST.var("ind"),AST.integer(0)),AST.endOfFile(AST.rExt("next"))),AST.not(AST.startsWith(AST.rExt("next"),AST.string(";")))),AST.lessEq(AST.indent(AST.rExt("next")),AST.var("ind")))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Module ::= Body  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Module").build()).addSymbol(new Nonterminal.Builder("Body").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Module ::= (m o d u l e) ModId Exports? (w h e r e) Body  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Module").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).addSymbol(new Nonterminal.Builder("ModId").build()).addSymbol(Opt.builder(new Nonterminal.Builder("Exports").build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build()).addSymbol(new Nonterminal.Builder("Body").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Integer ::= (0 O) Octal  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Integer").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(48).build(), Character.builder(79).build()).build()).build()).addSymbol(new Nonterminal.Builder("Octal").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Integer ::= (0 o) Octal  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Integer").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(48).build(), Character.builder(111).build()).build()).build()).addSymbol(new Nonterminal.Builder("Octal").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Integer ::= Decimal  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Integer").build()).addSymbol(new Nonterminal.Builder("Decimal").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Integer ::= (0 x) Hexadecimal  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Integer").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(48).build(), Character.builder(120).build()).build()).build()).addSymbol(new Nonterminal.Builder("Hexadecimal").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Integer ::= (0 X) Hexadecimal  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Integer").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(48).build(), Character.builder(88).build()).build()).build()).addSymbol(new Nonterminal.Builder("Hexadecimal").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CDecl ::= GenDecl  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CDecl").build()).addSymbol(new Nonterminal.Builder("GenDecl").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CDecl ::= FunLHS RHS  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CDecl").build()).addSymbol(new Nonterminal.Builder("FunLHS").build()).addSymbol(new Nonterminal.Builder("RHS").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CDecl ::= AssociatedTypeDecl  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CDecl").build()).addSymbol(new Nonterminal.Builder("AssociatedTypeDecl").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Import ::= ConId (((() (. .) ())) | ((() (QVar | Con)* ())))?  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Import").build()).addSymbol(new Nonterminal.Builder("ConId").build()).addSymbol(Opt.builder(Alt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(46).build(), Character.builder(46).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).build(), Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build(), Star.builder(Alt.builder(new Nonterminal.Builder("QVar").build(), new Nonterminal.Builder("Con").build()).build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build(), new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Import ::= Var  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Import").build()).addSymbol(new Nonterminal.Builder("Var").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Decl ::= FunLHS RHS  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Decl").build()).addSymbol(new Nonterminal.Builder("FunLHS").build()).addSymbol(new Nonterminal.Builder("RHS").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Decl ::= GenDecl  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Decl").build()).addSymbol(new Nonterminal.Builder("GenDecl").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Decl ::= AssociatedTypeDecl  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Decl").build()).addSymbol(new Nonterminal.Builder("AssociatedTypeDecl").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QVarSym ::= (ModId (.))? VarSym  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QVarSym").build()).addSymbol(Opt.builder(Sequence.builder(new Nonterminal.Builder("ModId").build(), new Terminal.Builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("VarSym").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (E T X)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(69).build(), Character.builder(84).build(), Character.builder(88).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (S O)  !>>  (H)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(83).build(), Character.builder(79).build()).build()).addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, new Terminal.Builder(Sequence.builder(Character.builder(72).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (H T)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(72).build(), Character.builder(84).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (E S C)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(69).build(), Character.builder(83).build(), Character.builder(67).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (^) Cntrl  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(94).build()).build()).build()).addSymbol(new Nonterminal.Builder("Cntrl").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (B S)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(66).build(), Character.builder(83).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (C A N)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(67).build(), Character.builder(65).build(), Character.builder(78).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (D E L)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(68).build(), Character.builder(69).build(), Character.builder(76).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (N U L)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(78).build(), Character.builder(85).build(), Character.builder(76).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (U S)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(85).build(), Character.builder(83).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (S T X)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(83).build(), Character.builder(84).build(), Character.builder(88).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (S U B)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(83).build(), Character.builder(85).build(), Character.builder(66).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (S O H)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(83).build(), Character.builder(79).build(), Character.builder(72).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (L F)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(76).build(), Character.builder(70).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (E T B)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(69).build(), Character.builder(84).build(), Character.builder(66).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (D L E)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(68).build(), Character.builder(76).build(), Character.builder(69).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (E M)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(69).build(), Character.builder(77).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (E N Q)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(69).build(), Character.builder(78).build(), Character.builder(81).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (F S)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(70).build(), Character.builder(83).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (F F)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(70).build(), Character.builder(70).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (N A K)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(78).build(), Character.builder(65).build(), Character.builder(75).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (G S)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(71).build(), Character.builder(83).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (E O T)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(69).build(), Character.builder(79).build(), Character.builder(84).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (A C K)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(65).build(), Character.builder(67).build(), Character.builder(75).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (B E L)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(66).build(), Character.builder(69).build(), Character.builder(76).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (C R)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(67).build(), Character.builder(82).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (D C 1)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(68).build(), Character.builder(67).build(), Character.builder(49).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (D C 4)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(68).build(), Character.builder(67).build(), Character.builder(52).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (D C 3)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(68).build(), Character.builder(67).build(), Character.builder(51).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (D C 2)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(68).build(), Character.builder(67).build(), Character.builder(50).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (S Y N)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(83).build(), Character.builder(89).build(), Character.builder(78).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (V T)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(86).build(), Character.builder(84).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (S I)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(83).build(), Character.builder(73).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (R S)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(82).build(), Character.builder(83).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Ascii ::= (S P)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Ascii").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(83).build(), Character.builder(80).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LPat ::= APat  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LPat").build()).addSymbol(new Nonterminal.Builder("APat").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LPat ::= GCon APat+  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LPat").build()).addSymbol(new Nonterminal.Builder("GCon").build()).addSymbol(new Plus.Builder(new Nonterminal.Builder("APat").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// LPat ::= (-) (Float | Integer)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("LPat").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build()).build()).build()).addSymbol(Alt.builder(new Nonterminal.Builder("Float").build(), new Nonterminal.Builder("Integer").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// HexIt ::= Digit  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("HexIt").build()).addSymbol(new Nonterminal.Builder("Digit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// HexIt ::= (A-F | a-f)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("HexIt").build()).addSymbol(Alt.builder(CharacterRange.builder(65, 70).build(), CharacterRange.builder(97, 102).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// RHS ::= GDRHS opt:((w h e r e) Decls)? when ind == 0 || len(opt) > 0 || $(opt.rExt) || not(startsWith(opt.rExt,"where")) || indent(opt.rExt) <= ind  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("RHS").build()).addSymbol(new Nonterminal.Builder("GDRHS").build()).addSymbol(Conditional.builder(Opt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build(), new Nonterminal.Builder("Decls").build()).build()).setLabel("opt").build(),AST.or(AST.or(AST.or(AST.or(AST.equal(AST.var("ind"),AST.integer(0)),AST.greater(AST.len(AST.var("opt")),AST.integer(0))),AST.endOfFile(AST.rExt("opt"))),AST.not(AST.startsWith(AST.rExt("opt"),AST.string("where")))),AST.lessEq(AST.indent(AST.rExt("opt")),AST.var("ind")))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// RHS ::= (=) Exp opt:((w h e r e) Decls)? when ind == 0 || len(opt) > 0 || $(opt.rExt) || not(startsWith(opt.rExt,"where")) || indent(opt.rExt) <= ind when ind == 0 || len(opt) > 0 || $(opt.rExt) || startsWith(opt.rExt,"}",")",";","in","of","then","else","where") || indent(opt.rExt) <= ind  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("RHS").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).addSymbol(Conditional.builder(Conditional.builder(Opt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build(), new Nonterminal.Builder("Decls").build()).build()).setLabel("opt").build(),AST.or(AST.or(AST.or(AST.or(AST.equal(AST.var("ind"),AST.integer(0)),AST.greater(AST.len(AST.var("opt")),AST.integer(0))),AST.endOfFile(AST.rExt("opt"))),AST.not(AST.startsWith(AST.rExt("opt"),AST.string("where")))),AST.lessEq(AST.indent(AST.rExt("opt")),AST.var("ind")))).build(),AST.or(AST.or(AST.or(AST.or(AST.equal(AST.var("ind"),AST.integer(0)),AST.greater(AST.len(AST.var("opt")),AST.integer(0))),AST.endOfFile(AST.rExt("opt"))),AST.startsWith(AST.rExt("opt"),AST.string("}"),AST.string(")"),AST.string(";"),AST.string("in"),AST.string("of"),AST.string("then"),AST.string("else"),AST.string("where"))),AST.lessEq(AST.indent(AST.rExt("opt")),AST.var("ind")))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CallConv ::= (j v m)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CallConv").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(106).build(), Character.builder(118).build(), Character.builder(109).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CallConv ::= (j a v a s c r i p t)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CallConv").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(106).build(), Character.builder(97).build(), Character.builder(118).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(99).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(112).build(), Character.builder(116).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CallConv ::= (c c a l l)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CallConv").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(99).build(), Character.builder(99).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(108).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CallConv ::= (c a p i)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CallConv").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(99).build(), Character.builder(97).build(), Character.builder(112).build(), Character.builder(105).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CallConv ::= (p r i m)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CallConv").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(112).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(109).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CallConv ::= (d o t n e t)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CallConv").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build(), Character.builder(116).build(), Character.builder(110).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CallConv ::= (c p l u s p l u s)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CallConv").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(99).build(), Character.builder(112).build(), Character.builder(108).build(), Character.builder(117).build(), Character.builder(115).build(), Character.builder(112).build(), Character.builder(108).build(), Character.builder(117).build(), Character.builder(115).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CallConv ::= (s t d c a l l)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CallConv").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(115).build(), Character.builder(116).build(), Character.builder(100).build(), Character.builder(99).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(108).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Fixity ::= (i n f i x l)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Fixity").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build(), Character.builder(108).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Fixity ::= (i n f i x r)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Fixity").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build(), Character.builder(114).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Fixity ::= (i n f i x)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Fixity").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Escape ::= (\) (CharEsc | ((o) Octal) | ((x) Hexadecimal) | Decimal | Ascii)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Escape").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(92).build()).build()).build()).addSymbol(Alt.builder(new Nonterminal.Builder("CharEsc").build(), Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(111).build()).build()).build(), new Nonterminal.Builder("Octal").build()).build(), Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(120).build()).build()).build(), new Nonterminal.Builder("Hexadecimal").build()).build(), new Nonterminal.Builder("Decimal").build(), new Nonterminal.Builder("Ascii").build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QuasiVarId ::= (')  !<<  (0-9 | A-Z | _ | a-z) (')? Small (Large | Small | Digit)*  !>>  (' | 0-9 | A-Z | _ | a-z)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QuasiVarId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(39).build()).build()).addPreConditions(set(new RegularExpressionCondition(ConditionType.NOT_PRECEDE, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build()).addSymbol(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(39).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("Small").build()).addSymbol(Star.builder(Alt.builder(new Nonterminal.Builder("Large").build(), new Nonterminal.Builder("Small").build(), new Nonterminal.Builder("Digit").build()).build()).addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(39, 39).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Alts ::= align offside DAlts*  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Alts").build()).addSymbol(Align.builder(Star.builder(Offside.builder(new Nonterminal.Builder("DAlts").build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Alts ::= ignore (({) Alt?+ (}))  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Alts").build()).addSymbol(Ignore.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(123).build()).build()).build(), new Plus.Builder(Opt.builder(new Nonterminal.Builder("Alt").build()).build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build())).build(), new Terminal.Builder(Sequence.builder(Character.builder(125).build()).build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AKind ::= (*)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AKind").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(42).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AKind ::= TyVar  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AKind").build()).addSymbol(new Nonterminal.Builder("TyVar").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AKind ::= PKind  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AKind").build()).addSymbol(new Nonterminal.Builder("PKind").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AKind ::= (() Kind ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AKind").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Nonterminal.Builder("Kind").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (d e f a u l t)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(102).build(), Character.builder(97).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (m o d u l e)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (d e r i v i n g)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(103).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (o f)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(111).build(), Character.builder(102).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (i n f i x l)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build(), Character.builder(108).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (i n f i x r)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build(), Character.builder(114).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (c l a s s)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(99).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (i f)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (w h e r e)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (_)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(95).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (i m p o r t)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(109).build(), Character.builder(112).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (d a t a)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(97).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (c a s e)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(99).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (t y p e)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (t h e n)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (l e t)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (i n)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (e l s e)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (n e w t y p e)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(110).build(), Character.builder(101).build(), Character.builder(119).build(), Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (f o r e i g n)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(101).build(), Character.builder(105).build(), Character.builder(103).build(), Character.builder(110).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (i n f i x)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (i n s t a n c e)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(101).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedId ::= (d o)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Dashes ::= (- -) (-)*  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Dashes").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(45).build()).build()).build()).addSymbol(Star.builder(new Terminal.Builder(Sequence.builder(Character.builder(45).build()).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// VarId ::= (Small (Small | Digit | Large | ('))*)  !<<  (0-9 | A-Z | _ | a-z)  !>>  (' | 0-9 | A-Z | _ | a-z)  \  ((l e t) | (c l a s s) | (_) | (i n f i x l) | (o f) | (i n s t a n c e) | (f o r e i g n) | (d o) | (d a t a) | (m o d u l e) | (i n f i x r) | (d e f a u l t) | (w h e r e) | (d e r i v i n g) | (t y p e) | (n e w t y p e) | (e l s e) | (t h e n) | (i f) | (c a s e) | (i n f i x) | (i m p o r t) | (i n))  !>>  (#)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("VarId").build()).addSymbol(Sequence.builder(new Nonterminal.Builder("Small").build(), Star.builder(Alt.builder(new Nonterminal.Builder("Small").build(), new Nonterminal.Builder("Digit").build(), new Nonterminal.Builder("Large").build(), new Terminal.Builder(Sequence.builder(Character.builder(39).build()).build()).build()).build()).build()).addPreConditions(set(new RegularExpressionCondition(ConditionType.NOT_PRECEDE, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(39, 39).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()), new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(new Terminal.Builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(99).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(95).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build(), Character.builder(108).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(111).build(), Character.builder(102).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(101).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(101).build(), Character.builder(105).build(), Character.builder(103).build(), Character.builder(110).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(97).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build(), Character.builder(114).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(102).build(), Character.builder(97).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(116).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(103).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(110).build(), Character.builder(101).build(), Character.builder(119).build(), Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(99).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(109).build(), Character.builder(112).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build()).build()), new RegularExpressionCondition(ConditionType.NOT_FOLLOW, new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// VarId ::= (Small (Small | Digit | Large | ('))*)  !<<  (0-9 | A-Z | _ | a-z)  !>>  (' | 0-9 | A-Z | _ | a-z)  \  ((l e t) | (c l a s s) | (_) | (i n f i x l) | (o f) | (i n s t a n c e) | (f o r e i g n) | (d o) | (d a t a) | (m o d u l e) | (i n f i x r) | (d e f a u l t) | (w h e r e) | (d e r i v i n g) | (t y p e) | (n e w t y p e) | (e l s e) | (t h e n) | (i f) | (c a s e) | (i n f i x) | (i m p o r t) | (i n)) (#)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("VarId").build()).addSymbol(Sequence.builder(new Nonterminal.Builder("Small").build(), Star.builder(Alt.builder(new Nonterminal.Builder("Small").build(), new Nonterminal.Builder("Digit").build(), new Nonterminal.Builder("Large").build(), new Terminal.Builder(Sequence.builder(Character.builder(39).build()).build()).build()).build()).build()).addPreConditions(set(new RegularExpressionCondition(ConditionType.NOT_PRECEDE, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(39, 39).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()), new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(new Terminal.Builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(99).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(95).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build(), Character.builder(108).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(111).build(), Character.builder(102).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(101).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(101).build(), Character.builder(105).build(), Character.builder(103).build(), Character.builder(110).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(111).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(97).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(109).build(), Character.builder(111).build(), Character.builder(100).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(101).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build(), Character.builder(114).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(102).build(), Character.builder(97).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(116).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(103).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(110).build(), Character.builder(101).build(), Character.builder(119).build(), Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(101).build(), Character.builder(108).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(116).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(110).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(102).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(99).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(101).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(102).build(), Character.builder(105).build(), Character.builder(120).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(109).build(), Character.builder(112).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(116).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build()).build()).build()).build()))).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// VarId ::= QuasiVarId  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("VarId").build()).addSymbol(new Nonterminal.Builder("QuasiVarId").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// VarOp ::= (`) VarId (`)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("VarOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(96).build()).build()).build()).addSymbol(new Nonterminal.Builder("VarId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(96).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// VarOp ::= VarSym  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("VarOp").build()).addSymbol(new Nonterminal.Builder("VarSym").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedOp ::= (: :)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedOp ::= (< -)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedOp ::= (. .)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(46).build(), Character.builder(46).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedOp ::= (> -)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(62).build(), Character.builder(45).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedOp ::= (= >)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(61).build(), Character.builder(62).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedOp ::= (:)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(58).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedOp ::= (=)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(61).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedOp ::= (@)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(64).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedOp ::= (\)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(92).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedOp ::= (> > -)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(62).build(), Character.builder(62).build(), Character.builder(45).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedOp ::= (- < <)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(60).build(), Character.builder(60).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedOp ::= (|)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(124).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedOp ::= (~)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(126).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedOp ::= (- <)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(60).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ReservedOp ::= (- >)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ReservedOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Whitespace ::= WhiteStuff*  !>>  ({ -)  !>>  (- -)  !>>  (\u0009-\u000B | \
        |){UNDEFINED,-1,NON_REC}PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Whitespace").build()).addSymbol(Star.builder(new Nonterminal.Builder("WhiteStuff").build()).addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, new Terminal.Builder(Sequence.builder(Character.builder(123).build(), Character.builder(45).build()).build()).build()), new RegularExpressionCondition(ConditionType.NOT_FOLLOW, new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(45).build()).build()).build()), new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(9, 11).build(), CharacterRange.builder(13, 13).build(), CharacterRange.builder(32, 32).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// FBind ::= QVar ((=) Exp)?  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("FBind").build()).addSymbol(new Nonterminal.Builder("QVar").build()).addSymbol(Opt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(61).build()).build()).build(), new Nonterminal.Builder("Exp").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// BType ::= BType? (!)? AType  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("BType").build()).addSymbol(Opt.builder(new Nonterminal.Builder("BType").build()).build()).addSymbol(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(33).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("AType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// TypeFamilyInstEqn ::= Type (=) CType  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("TypeFamilyInstEqn").build()).addSymbol(new Nonterminal.Builder("Type").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(new Nonterminal.Builder("CType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// InfixExp ::= LExp1 QOp InfixExp  {UNDEFINED,1,RIGHT_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("InfixExp").build()).addSymbol(new Nonterminal.Builder("LExp1").build()).addSymbol(new Nonterminal.Builder("QOp").build()).addSymbol(new Nonterminal.Builder("InfixExp").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// InfixExp ::= LExp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("InfixExp").build()).addSymbol(new Nonterminal.Builder("LExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// InfixExp ::= ($ () Exp ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("InfixExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(36).build(), Character.builder(40).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// InfixExp ::= (-) InfixExp  {UNDEFINED,1,RIGHT_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("InfixExp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(45).build()).build()).build()).addSymbol(new Nonterminal.Builder("InfixExp").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// Constr ::= BType ConOp BType  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Constr").build()).addSymbol(new Nonterminal.Builder("BType").build()).addSymbol(new Nonterminal.Builder("ConOp").build()).addSymbol(new Nonterminal.Builder("BType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Constr ::= ((f o r a l l) TVBinder* (.))? Con ignore (({) FieldDecl* (}))  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Constr").build()).addSymbol(Opt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(108).build()).build()).build(), Star.builder(new Nonterminal.Builder("TVBinder").build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("Con").build()).addSymbol(Ignore.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(123).build()).build()).build(), Star.builder(new Nonterminal.Builder("FieldDecl").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build(), new Terminal.Builder(Sequence.builder(Character.builder(125).build()).build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Constr ::= Con ((!)? AType)*  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Constr").build()).addSymbol(new Nonterminal.Builder("Con").build()).addSymbol(Star.builder(Sequence.builder(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(33).build()).build()).build()).build(), new Nonterminal.Builder("AType").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Constr ::= (f o r a l l) TVBinder* (.) CType  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Constr").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(108).build()).build()).build()).addSymbol(Star.builder(new Nonterminal.Builder("TVBinder").build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(46).build()).build()).build()).addSymbol(new Nonterminal.Builder("CType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// String ::= (") (Gap | Escape | Graphic | Space)* (")  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("String").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(34).build()).build()).build()).addSymbol(Star.builder(Alt.builder(new Nonterminal.Builder("Gap").build(), new Nonterminal.Builder("Escape").build(), new Nonterminal.Builder("Graphic").addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Alt.builder(CharacterRange.builder(34, 34).build(), CharacterRange.builder(92, 92).build()).build()).build()))).build(), new Nonterminal.Builder("Space").build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(34).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Kind ::= AKind* ((- >) Kind)?  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Kind").build()).addSymbol(Star.builder(new Nonterminal.Builder("AKind").build()).build()).addSymbol(Opt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), new Nonterminal.Builder("Kind").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Decls ::= align offside DDecls*  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Decls").build()).addSymbol(Align.builder(Star.builder(Offside.builder(new Nonterminal.Builder("DDecls").build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Decls ::= ignore (({) Decl?+ (}))  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Decls").build()).addSymbol(Ignore.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(123).build()).build()).build(), new Plus.Builder(Opt.builder(new Nonterminal.Builder("Decl").build()).build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build())).build(), new Terminal.Builder(Sequence.builder(Character.builder(125).build()).build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// FRType ::= FAType  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("FRType").build()).addSymbol(new Nonterminal.Builder("FAType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// FRType ::= (() ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("FRType").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Graphic ::= Special  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Graphic").build()).addSymbol(new Nonterminal.Builder("Special").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Graphic ::= Small  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Graphic").build()).addSymbol(new Nonterminal.Builder("Small").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Graphic ::= Symbol  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Graphic").build()).addSymbol(new Nonterminal.Builder("Symbol").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Graphic ::= Digit  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Graphic").build()).addSymbol(new Nonterminal.Builder("Digit").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Graphic ::= Large  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Graphic").build()).addSymbol(new Nonterminal.Builder("Large").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Graphic ::= (")  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Graphic").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(34).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Graphic ::= (')  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Graphic").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(39).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QuasiConId ::= (')  !<<  (0-9 | A-Z | _ | a-z) (')? Large (Large | Small | Digit)*  !>>  (' | 0-9 | A-Z | _ | a-z)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QuasiConId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(39).build()).build()).addPreConditions(set(new RegularExpressionCondition(ConditionType.NOT_PRECEDE, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build()).addSymbol(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(39).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("Large").build()).addSymbol(Star.builder(Alt.builder(new Nonterminal.Builder("Large").build(), new Nonterminal.Builder("Small").build(), new Nonterminal.Builder("Digit").build()).build()).addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(39, 39).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AType ::= (() (#)? CType+ (#)? ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AType").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build()).build()).addSymbol(new Plus.Builder(new Nonterminal.Builder("CType").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AType ::= ([) CType (])  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AType").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(new Nonterminal.Builder("CType").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AType ::= (() CType (: :) Kind ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AType").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Nonterminal.Builder("CType").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(new Nonterminal.Builder("Kind").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AType ::= GTyCon  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AType").build()).addSymbol(new Nonterminal.Builder("GTyCon").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AType ::= TyVar  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AType").build()).addSymbol(new Nonterminal.Builder("TyVar").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// APat ::= (_)  !>>  (- | A-Z | _ | a-z)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("APat").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(95).build()).build()).addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(45, 45).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// APat ::= (() ((_) | Var) (: :) CType ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("APat").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Alt.builder(new Terminal.Builder(Sequence.builder(Character.builder(95).build()).build()).build(), new Nonterminal.Builder("Var").build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(new Nonterminal.Builder("CType").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// APat ::= (() (#)? Pat+ (#)? ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("APat").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build()).build()).addSymbol(new Plus.Builder(new Nonterminal.Builder("Pat").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// APat ::= LiteralH  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("APat").build()).addSymbol(new Nonterminal.Builder("LiteralH").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// APat ::= GCon  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("APat").build()).addSymbol(new Nonterminal.Builder("GCon").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// APat ::= (~) APat  {UNDEFINED,1,RIGHT_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("APat").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(126).build()).build()).build()).addSymbol(new Nonterminal.Builder("APat").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// APat ::= ([) Pat+ (])  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("APat").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(91).build()).build()).build()).addSymbol(new Plus.Builder(new Nonterminal.Builder("Pat").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(93).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// APat ::= Var ((@) APat)?  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("APat").build()).addSymbol(new Nonterminal.Builder("Var").build()).addSymbol(Opt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(64).build()).build()).build(), new Nonterminal.Builder("APat").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// APat ::= QCon ({) FPat* (})  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("APat").build()).addSymbol(new Nonterminal.Builder("QCon").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(123).build()).build()).build()).addSymbol(Star.builder(new Nonterminal.Builder("FPat").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(125).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// APat ::= (!) APat  {UNDEFINED,1,RIGHT_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("APat").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(33).build()).build()).build()).addSymbol(new Nonterminal.Builder("APat").build()).setRecursion(Recursion.RIGHT_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(1).setPrecedenceLevel(PrecedenceLevel.from(1,1,1,true,false,false,false)).build())
//// QOp ::= QConOp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QOp").build()).addSymbol(new Nonterminal.Builder("QConOp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QOp ::= QVarOp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QOp").build()).addSymbol(new Nonterminal.Builder("QVarOp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AssociatedTypeDecl ::= (t y p e) (i n s t a n c e)? TypeFamilyInstEqn  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AssociatedTypeDecl").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).addSymbol(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(101).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("TypeFamilyInstEqn").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// AssociatedTypeDecl ::= (t y p e) (f a m i l y)? Type ((: :) Kind)? ((w h e r e) CDecls)?  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("AssociatedTypeDecl").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).addSymbol(Opt.builder(new Terminal.Builder(Sequence.builder(Character.builder(102).build(), Character.builder(97).build(), Character.builder(109).build(), Character.builder(105).build(), Character.builder(108).build(), Character.builder(121).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("Type").build()).addSymbol(Opt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), new Nonterminal.Builder("Kind").build()).build()).build()).addSymbol(Opt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build(), new Nonterminal.Builder("CDecls").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Tab ::= \u0009  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Tab").build()).addSymbol(Character.builder(9).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QConSym ::= (ModId (.))? ConSym  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QConSym").build()).addSymbol(Opt.builder(Sequence.builder(new Nonterminal.Builder("ModId").build(), new Terminal.Builder(Sequence.builder(Character.builder(46).build()).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("ConSym").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// VarSym ::= (Symbol \  ((:)) Symbol*)  \  ((:) | (~) | (=) | (= >) | (\) | (|) | (< -) | (- >) | (> -) | (- <) | (> > -) | (- < <) | (: :) | (. .) | (@))  !>>  (! | #-& | *-+ | --/ | : | <-@ | \ | ^ | | | ~)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("VarSym").build()).addSymbol(Sequence.builder(new Nonterminal.Builder("Symbol").addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(new Terminal.Builder(Sequence.builder(Character.builder(58).build()).build()).build()).build()))).build(), Star.builder(new Nonterminal.Builder("Symbol").build()).build()).addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(new Terminal.Builder(Sequence.builder(Character.builder(58).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(126).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(61).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(61).build(), Character.builder(62).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(92).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(124).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(62).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(62).build(), Character.builder(45).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(60).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(62).build(), Character.builder(62).build(), Character.builder(45).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(45).build(), Character.builder(60).build(), Character.builder(60).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(46).build(), Character.builder(46).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(64).build()).build()).build()).build()), new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(33, 33).build(), CharacterRange.builder(35, 38).build(), CharacterRange.builder(42, 43).build(), CharacterRange.builder(45, 47).build(), CharacterRange.builder(58, 58).build(), CharacterRange.builder(60, 64).build(), CharacterRange.builder(92, 92).build(), CharacterRange.builder(94, 94).build(), CharacterRange.builder(124, 124).build(), CharacterRange.builder(126, 126).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Special ::= ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Special").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Special ::= (;)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Special").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Special ::= (()  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Special").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Special ::= (,)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Special").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Special ::= (])  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Special").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(93).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Special ::= ([)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Special").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(91).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Special ::= (})  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Special").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(125).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Special ::= (`)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Special").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(96).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Special ::= ({)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Special").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(123).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// TopDecls ::= TopDecl ((;) TopDecl?)*  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("TopDecls").build()).addSymbol(new Nonterminal.Builder("TopDecl").build()).addSymbol(Star.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(59).build()).build()).build(), Opt.builder(new Nonterminal.Builder("TopDecl").build()).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QVar ::= (() QVarSym ())  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QVar").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Nonterminal.Builder("QVarSym").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QVar ::= QVarId  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QVar").build()).addSymbol(new Nonterminal.Builder("QVarId").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// TyVar ::= VarId \  ((f o r a l l) | (f a m i l y))  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("TyVar").build()).addSymbol(new Nonterminal.Builder("VarId").addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(new Terminal.Builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(97).build(), Character.builder(108).build(), Character.builder(108).build()).build()).build(), new Terminal.Builder(Sequence.builder(Character.builder(102).build(), Character.builder(97).build(), Character.builder(109).build(), Character.builder(105).build(), Character.builder(108).build(), Character.builder(121).build()).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Safety ::= (u n s a f e)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Safety").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(117).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(97).build(), Character.builder(102).build(), Character.builder(101).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Safety ::= (s a f e)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Safety").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(115).build(), Character.builder(97).build(), Character.builder(102).build(), Character.builder(101).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ConOp ::= (`) ConId (`)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ConOp").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(96).build()).build()).build()).addSymbol(new Nonterminal.Builder("ConId").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(96).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ConOp ::= ConSym  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ConOp").build()).addSymbol(new Nonterminal.Builder("ConSym").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Vars ::= Var+  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Vars").build()).addSymbol(new Plus.Builder(new Nonterminal.Builder("Var").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Qual ::= ((_) | Var) (: :) CType (< -) Exp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Qual").build()).addSymbol(Alt.builder(new Terminal.Builder(Sequence.builder(Character.builder(95).build()).build()).build(), new Nonterminal.Builder("Var").build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(new Nonterminal.Builder("CType").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Qual ::= (l e t) Decls  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Qual").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(108).build(), Character.builder(101).build(), Character.builder(116).build()).build()).build()).addSymbol(new Nonterminal.Builder("Decls").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Qual ::= Exp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Qual").build()).addSymbol(new Nonterminal.Builder("Exp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Qual ::= Pat (< -) Exp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Qual").build()).addSymbol(new Nonterminal.Builder("Pat").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(60).build(), Character.builder(45).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CName ::= Var  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CName").build()).addSymbol(new Nonterminal.Builder("Var").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CName ::= Con  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CName").build()).addSymbol(new Nonterminal.Builder("Con").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Expent ::= String?  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Expent").build()).addSymbol(Opt.builder(new Nonterminal.Builder("String").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ConId ::=  !<<  (0-9 | A-Z | _ | a-z)Large (Small | Digit | Large | ('))*  !>>  (' | 0-9 | A-Z | _ | a-z) (#)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ConId").build()).addSymbol(new Nonterminal.Builder("Large").addPreConditions(set(new RegularExpressionCondition(ConditionType.NOT_PRECEDE, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build()).addSymbol(Star.builder(Alt.builder(new Nonterminal.Builder("Small").build(), new Nonterminal.Builder("Digit").build(), new Nonterminal.Builder("Large").build(), new Terminal.Builder(Sequence.builder(Character.builder(39).build()).build()).build()).build()).addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(39, 39).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ConId ::=  !<<  (0-9 | A-Z | _ | a-z)Large (Small | Digit | Large | ('))*  !>>  (' | 0-9 | A-Z | _ | a-z)  !>>  (#)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ConId").build()).addSymbol(new Nonterminal.Builder("Large").addPreConditions(set(new RegularExpressionCondition(ConditionType.NOT_PRECEDE, Alt.builder(CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()))).build()).addSymbol(Star.builder(Alt.builder(new Nonterminal.Builder("Small").build(), new Nonterminal.Builder("Digit").build(), new Nonterminal.Builder("Large").build(), new Terminal.Builder(Sequence.builder(Character.builder(39).build()).build()).build()).build()).addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_FOLLOW, Alt.builder(CharacterRange.builder(39, 39).build(), CharacterRange.builder(48, 57).build(), CharacterRange.builder(65, 90).build(), CharacterRange.builder(95, 95).build(), CharacterRange.builder(97, 122).build()).build()), new RegularExpressionCondition(ConditionType.NOT_FOLLOW, new Terminal.Builder(Sequence.builder(Character.builder(35).build()).build()).build()))).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// ConId ::= QuasiConId  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("ConId").build()).addSymbol(new Nonterminal.Builder("QuasiConId").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// TopDecl ::= (c l a s s) (Context (= >))? Type Fds? ((w h e r e) CDecls)?  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("TopDecl").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(99).build(), Character.builder(108).build(), Character.builder(97).build(), Character.builder(115).build(), Character.builder(115).build()).build()).build()).addSymbol(Opt.builder(Sequence.builder(new Nonterminal.Builder("Context").build(), new Terminal.Builder(Sequence.builder(Character.builder(61).build(), Character.builder(62).build()).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("Type").build()).addSymbol(Opt.builder(new Nonterminal.Builder("Fds").build()).build()).addSymbol(Opt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build(), new Nonterminal.Builder("CDecls").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// TopDecl ::= (n e w t y p e) (Context (= >))? Type (=) NewConstr Deriving?  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("TopDecl").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(110).build(), Character.builder(101).build(), Character.builder(119).build(), Character.builder(116).build(), Character.builder(121).build(), Character.builder(112).build(), Character.builder(101).build()).build()).build()).addSymbol(Opt.builder(Sequence.builder(new Nonterminal.Builder("Context").build(), new Terminal.Builder(Sequence.builder(Character.builder(61).build(), Character.builder(62).build()).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("Type").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(new Nonterminal.Builder("NewConstr").build()).addSymbol(Opt.builder(new Nonterminal.Builder("Deriving").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// TopDecl ::= Decl  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("TopDecl").build()).addSymbol(new Nonterminal.Builder("Decl").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// TopDecl ::= (d a t a) (Context (= >))? Type ((=) Constrs)? Deriving?  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("TopDecl").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(97).build()).build()).build()).addSymbol(Opt.builder(Sequence.builder(new Nonterminal.Builder("Context").build(), new Terminal.Builder(Sequence.builder(Character.builder(61).build(), Character.builder(62).build()).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("Type").build()).addSymbol(Opt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(61).build()).build()).build(), new Nonterminal.Builder("Constrs").build()).build()).build()).addSymbol(Opt.builder(new Nonterminal.Builder("Deriving").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// TopDecl ::= (f o r e i g n) FDecl  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("TopDecl").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(102).build(), Character.builder(111).build(), Character.builder(114).build(), Character.builder(101).build(), Character.builder(105).build(), Character.builder(103).build(), Character.builder(110).build()).build()).build()).addSymbol(new Nonterminal.Builder("FDecl").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// TopDecl ::= (i n s t a n c e) CType ((w h e r e) CDecls)?  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("TopDecl").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(101).build()).build()).build()).addSymbol(new Nonterminal.Builder("CType").build()).addSymbol(Opt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build(), new Nonterminal.Builder("CDecls").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// TopDecl ::= (d e r i v i n g) (i n s t a n c e) (Context (= >))? QTyCls Inst  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("TopDecl").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(105).build(), Character.builder(118).build(), Character.builder(105).build(), Character.builder(110).build(), Character.builder(103).build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(105).build(), Character.builder(110).build(), Character.builder(115).build(), Character.builder(116).build(), Character.builder(97).build(), Character.builder(110).build(), Character.builder(99).build(), Character.builder(101).build()).build()).build()).addSymbol(Opt.builder(Sequence.builder(new Nonterminal.Builder("Context").build(), new Terminal.Builder(Sequence.builder(Character.builder(61).build(), Character.builder(62).build()).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("QTyCls").build()).addSymbol(new Nonterminal.Builder("Inst").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// TopDecl ::= InfixExp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("TopDecl").build()).addSymbol(new Nonterminal.Builder("InfixExp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// TopDecl ::= (d e f a u l t) Type*  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("TopDecl").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(101).build(), Character.builder(102).build(), Character.builder(97).build(), Character.builder(117).build(), Character.builder(108).build(), Character.builder(116).build()).build()).build()).addSymbol(Star.builder(new Nonterminal.Builder("Type").build()).addSeparators(Arrays.asList(new Terminal.Builder(Sequence.builder(Character.builder(44).build()).build()).build())).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// TopDecl ::= (d a t a) (Context (= >))? Type ((: :) Kind)? (w h e r e) GADTDecls  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("TopDecl").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(100).build(), Character.builder(97).build(), Character.builder(116).build(), Character.builder(97).build()).build()).build()).addSymbol(Opt.builder(Sequence.builder(new Nonterminal.Builder("Context").build(), new Terminal.Builder(Sequence.builder(Character.builder(61).build(), Character.builder(62).build()).build()).build()).build()).build()).addSymbol(new Nonterminal.Builder("Type").build()).addSymbol(Opt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build(), new Nonterminal.Builder("Kind").build()).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(119).build(), Character.builder(104).build(), Character.builder(101).build(), Character.builder(114).build(), Character.builder(101).build()).build()).build()).addSymbol(new Nonterminal.Builder("GADTDecls").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Op ::= ConOp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Op").build()).addSymbol(new Nonterminal.Builder("ConOp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Op ::= VarOp  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Op").build()).addSymbol(new Nonterminal.Builder("VarOp").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Impent ::= String?  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Impent").build()).addSymbol(Opt.builder(new Nonterminal.Builder("String").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// FunLHS ::= (() FunLHS ()) APat+  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("FunLHS").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(40).build()).build()).build()).addSymbol(new Nonterminal.Builder("FunLHS").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(41).build()).build()).build()).addSymbol(new Plus.Builder(new Nonterminal.Builder("APat").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// FunLHS ::= Pat (VarOp Pat)?  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("FunLHS").build()).addSymbol(new Nonterminal.Builder("Pat").build()).addSymbol(Opt.builder(Sequence.builder(new Nonterminal.Builder("VarOp").addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(new Terminal.Builder(Sequence.builder(Character.builder(33).build()).build()).build()).build()))).build(), new Nonterminal.Builder("Pat").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// FunLHS ::= Var APat+  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("FunLHS").build()).addSymbol(new Nonterminal.Builder("Var").build()).addSymbol(new Plus.Builder(new Nonterminal.Builder("APat").build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// FPat ::= (. .)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("FPat").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(46).build(), Character.builder(46).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// FPat ::= QVar ((=) Pat)?  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("FPat").build()).addSymbol(new Nonterminal.Builder("QVar").build()).addSymbol(Opt.builder(Sequence.builder(new Terminal.Builder(Sequence.builder(Character.builder(61).build()).build()).build(), new Nonterminal.Builder("Pat").build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// TyCon ::= ConId  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("TyCon").build()).addSymbol(new Nonterminal.Builder("ConId").build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// DStmt ::= Qual  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("DStmt").build()).addSymbol(new Nonterminal.Builder("Qual").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// DStmt ::= (r e c) Stmts  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("DStmt").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(114).build(), Character.builder(101).build(), Character.builder(99).build()).build()).build()).addSymbol(new Nonterminal.Builder("Stmts").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QTyConSym ::= (*)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QTyConSym").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(42).build()).build()).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QTyConSym ::= QVarSym  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QTyConSym").build()).addSymbol(new Nonterminal.Builder("QVarSym").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// QTyConSym ::= QConSym  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("QTyConSym").build()).addSymbol(new Nonterminal.Builder("QConSym").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CharEsc ::= (\)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CharEsc").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(92).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CharEsc ::= (a)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CharEsc").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(97).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CharEsc ::= (t)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CharEsc").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(116).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CharEsc ::= (r)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CharEsc").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(114).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CharEsc ::= (v)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CharEsc").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(118).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CharEsc ::= (b)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CharEsc").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(98).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CharEsc ::= (f)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CharEsc").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(102).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CharEsc ::= (n)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CharEsc").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(110).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CharEsc ::= (')  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CharEsc").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(39).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CharEsc ::= (")  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CharEsc").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(34).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// CharEsc ::= (&)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("CharEsc").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(38).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Char ::= (') (Escape | Space | Graphic) (')  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Char").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(39).build()).build()).build()).addSymbol(Alt.builder(new Nonterminal.Builder("Escape").addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Alt.builder(CharacterRange.builder(38, 38).build(), CharacterRange.builder(92, 92).build()).build()).build()))).build(), new Nonterminal.Builder("Space").build(), new Nonterminal.Builder("Graphic").addPostConditions(set(new RegularExpressionCondition(ConditionType.NOT_MATCH, Alt.builder(Alt.builder(CharacterRange.builder(39, 39).build(), CharacterRange.builder(92, 92).build()).build()).build()))).build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(39).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// Gap ::= (\) WhiteChar WhiteChar* (\)  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("Gap").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(92).build()).build()).build()).addSymbol(new Nonterminal.Builder("WhiteChar").build()).addSymbol(Star.builder(new Nonterminal.Builder("WhiteChar").build()).build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(92).build()).build()).build()).setLayoutStrategy(NO_LAYOUT).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GenDecl ::= Vars (: :) CType  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GenDecl").build()).addSymbol(new Nonterminal.Builder("Vars").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(58).build(), Character.builder(58).build()).build()).build()).addSymbol(new Nonterminal.Builder("CType").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GenDecl ::= Fixity Integer? Ops  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GenDecl").build()).addSymbol(new Nonterminal.Builder("Fixity").build()).addSymbol(Opt.builder(new Nonterminal.Builder("Integer").build()).build()).addSymbol(new Nonterminal.Builder("Ops").build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//// GDRHS ::= Guards (=) Exp opt:GDRHS? when ind == 0 || len(opt) > 0 || $(opt.rExt) || startsWith(opt.rExt,"}",")",";","in","of","then","else","where","|") || indent(opt.rExt) <= ind  {UNDEFINED,-1,NON_REC} PREC(1,1)
//.addRule(Rule.withHead(new Nonterminal.Builder("GDRHS").build()).addSymbol(new Nonterminal.Builder("Guards").build()).addSymbol(new Terminal.Builder(Sequence.builder(Character.builder(61).build()).build()).build()).addSymbol(new Nonterminal.Builder("Exp").build()).addSymbol(Conditional.builder(Opt.builder(new Nonterminal.Builder("GDRHS").build()).setLabel("opt").build(),AST.or(AST.or(AST.or(AST.or(AST.equal(AST.var("ind"),AST.integer(0)),AST.greater(AST.len(AST.var("opt")),AST.integer(0))),AST.endOfFile(AST.rExt("opt"))),AST.startsWith(AST.rExt("opt"),AST.string("}"),AST.string(")"),AST.string(";"),AST.string("in"),AST.string("of"),AST.string("then"),AST.string("else"),AST.string("where"),AST.string("|"))),AST.lessEq(AST.indent(AST.rExt("opt")),AST.var("ind")))).build()).setRecursion(Recursion.NON_REC).setAssociativity(Associativity.UNDEFINED).setPrecedence(-1).setPrecedenceLevel(PrecedenceLevel.from(1,1,-1,false,false,false,false)).build())
//.build();
//
//         DesugarAlignAndOffside desugarAlignAndOffside = new DesugarAlignAndOffside();
//         desugarAlignAndOffside.doAlign();
//
//         grammar = desugarAlignAndOffside.transform(grammar);
//         // System.out.println(grammar.toStringWithOrderByPrecedence());
//
//         grammar = new EBNFToBNF().transform(grammar);
//         // System.out.println(grammar);
//
//         desugarAlignAndOffside.doOffside();
//         grammar = desugarAlignAndOffside.transform(grammar);
//         // System.out.println(grammar.toStringWithOrderByPrecedence());
//
//         grammar = new DesugarPrecedenceAndAssociativity().transform(grammar);
//         System.out.println(grammar.toStringWithOrderByPrecedence());
//
//         grammar = new LayoutWeaver().transform(grammar);
//
//         Input input = Input.fromPath(SelectedFiles.test11_3);
//         GrammarGraph graph = GrammarGraph.from(grammar, input, Configuration.DEFAULT);
//
//         // Visualization.generateGrammarGraph("/Users/anastasiaizmaylova/git/diguana/test/org/jgll/parser/datadependent/haskell/", graph);
//
//         ParseResult result = IguanaParser.getParserTree(input, graph, Start.from(Nonterminal.withName("Module")));
//
//         System.out.println(result);
//
//         Assert.assertTrue(result.isParseSuccess());
//
////         SelectedFiles.getVisitor(input).visit(result.asParseSuccess().getResult());
//
//         Assert.assertTrue(result.asParseSuccess().getStatistics().getCountAmbiguousNodes() == 0);
//    }
//}
